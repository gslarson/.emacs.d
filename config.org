#+TITLE: Emacs Configuration
#+AUTHOR: [[mailto:gslarson@gmail.com][GS Larson <gslarson@gmail.com>]]

* Intro

After years of using vanilla emacs in order to avoid asynchronous
configuation management accross the many platforms on which emacs is
used. I find myself taking advantage of *org-mode babel*,
*use-package*, and *github* in order to use a more civil config while
having access to the same config from any box that has internet
access.

* Boilerplate Init Dot El

Add the following snippet to init to el:

#+BEGIN_SRC 
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))
#+END_SRC

* Config Dot Org

#+BEGIN_SRC emacs-lisp
(defun eval-last-sexp-to-kill-ring ()
  (interactive)
  (kill-new (with-output-to-string (princ (call-interactively 'eval-last-sexp)))))
(use-package magit
  :ensure t)
(use-package ido
  :ensure t
  :config
  (setq ido-enable-flex-matching t)
  (ido-everywhere t)
  (ido-mode 1))
(use-package which-key
  :ensure t
  :init (which-key-mode))
(use-package beacon
  :ensure t
  :init (beacon-mode))
(use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-char-timer))
#+END_SRC

** Auto Completion

The following sets up comapany and irony for C auto-completion. Add
"emacs-lisp" to src tag for inclusion. It is currently excluded because
of byte-compile problems in irony related to irony-cdb-json--target-path.

#+BEGIN_SRC 
(use-package company
  :ensure t
  :config
  (setq company-idle-delay 0)
  (setq company-minimum-prefix-length 3)
  (define-key company-active-map (kbd "M-n") nil)
  (define-key company-active-map (kbd "M-p") nil)
  (define-key company-active-map (kbd "C-n") #'company-select-next)
  (define-key company-active-map (kbd "C-p") #'company-select-previous)
  (add-hook 'c++-mode-hook 'company-mode)
  (add-hook 'c-mode-hook 'company-mode))
(use-package company-irony
  :ensure t
  :config
  (require 'company)
  (add-to-list 'company-backends 'company-irony))
(use-package irony
  :ensure t
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))
#+END_SRC

** Misc settings

#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
(setq scroll-conservatively 100)
(when window-system (global-hl-line-mode t))
(global-set-key (kbd "C-x C-b") 'ibuffer)
(setq electric-pair-pairs '((?\( . ?\)) (?\{ . ?\})
  (?\[ . ?\]) (?\" . ?\") (?\' . ?\')))
(electric-pair-mode t)
#+END_SRC
